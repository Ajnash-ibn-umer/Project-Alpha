{
  "version": 3,
  "sources": ["../../src/services/jwtAuth.ts"],
  "sourcesContent": ["import jwt from 'jsonwebtoken'\nimport { JWT_SECRET } from '../config/variables'\n\nexport const jwtsigning = (data: unknown, time?: string) => {\n    return new Promise((resolve, reject) => {\n        console.log('key:', JWT_SECRET);\n\n        jwt.sign({\n            data: data,\n        }, JWT_SECRET, { expiresIn: time || \"3d\" }, (err:any, decoded:any) => {\n            if (err) {\n                console.error(err);\n\n            } else {\n                const token = decoded\n                console.log('decoded', decoded);\n                resolve(token)\n            }\n        })\n\n    })\n\n}\nexport const jwtverifyToken = ((token: string) => {\n    return new Promise((resolve, reject) => {\n        jwt.verify(token, JWT_SECRET, (err, value:any) => {\n            \n            if (err) {\n                console.log('error @ jwt',err.message);\n                reject(err)\n            } else {\n                resolve(value)\n            }\n        });\n\n    })\n})\n// export const verifyLogin = (req, res, next) => {\n//     const token = req.headers.token;\n//     console.log(\"tk\", token);\n//     jwt.verify(token, JWT_SECRET, (err, value) => {\n//       if (err) {\n//         console.log(err.message);\n//         res.status(401).send(err.message);\n//       } else {\n//         console.log(value.data);\n//         next();\n//       }\n//     });\n//   };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgB;AAChB,uBAA2B;AAEpB,MAAM,aAAa,CAAC,MAAe,SAAkB;AACxD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,YAAQ,IAAI,QAAQ,2BAAU;AAE9B,wBAAAA,QAAI,KAAK;AAAA,MACL;AAAA,IACJ,GAAG,6BAAY,EAAE,WAAW,QAAQ,KAAK,GAAG,CAAC,KAAS,YAAgB;AAClE,UAAI,KAAK;AACL,gBAAQ,MAAM,GAAG;AAAA,MAErB,OAAO;AACH,cAAM,QAAQ;AACd,gBAAQ,IAAI,WAAW,OAAO;AAC9B,gBAAQ,KAAK;AAAA,MACjB;AAAA,IACJ,CAAC;AAAA,EAEL,CAAC;AAEL;AACO,MAAM,iBAAkB,CAAC,UAAkB;AAC9C,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,wBAAAA,QAAI,OAAO,OAAO,6BAAY,CAAC,KAAK,UAAc;AAE9C,UAAI,KAAK;AACL,gBAAQ,IAAI,eAAc,IAAI,OAAO;AACrC,eAAO,GAAG;AAAA,MACd,OAAO;AACH,gBAAQ,KAAK;AAAA,MACjB;AAAA,IACJ,CAAC;AAAA,EAEL,CAAC;AACL;",
  "names": ["jwt"]
}
