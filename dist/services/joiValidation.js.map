{
  "version": 3,
  "sources": ["../../src/services/joiValidation.ts"],
  "sourcesContent": ["// import { userLoginParams, userRegisterParams } from \"../types\";\n\n\nimport joi from 'joi'\nimport { userLoginParams, userRegisterParams } from 'src/types'\n\n\nexport default {\n\n    userRegister: (data: userRegisterParams) => {\n        return new Promise<any>(async (resolve, reject) => {\n            console.log('validation d',data);\n            \n            const schema = joi.object({\n                fullName: joi.string().min(3).max(30),\n                email: joi.string().min(3).max(30).email().required(),\n                username: joi.string().min(3).max(30).required().pattern(new RegExp('^[a-zA-Z0-9.-]{1,30}$')).messages({\n                    'string.min': 'Username should have at least 3 characters',\n                    'string.max': 'Username should not have more than 30 characters',\n                    'string.pattern.base': 'Username should only have alphanumeric characters, dots and hyphens '\n                }),\n                password: joi.string().min(8).required(),\n                confirmPassword: joi.ref('password'),\n               \n            })\n            const { error } =  schema.validate(data)\n            if (error) {\n                console.log('error in validation');\n\n                reject(error.details[0].message)\n            } else {\n                resolve(true)\n\n            }\n        })\n\n    },\n    userLogin: (data: userLoginParams) => {\n        return new Promise<any>(async (resolve, reject) => {\n            const schema = joi.object({\n\n                email: joi.string().min(3).max(30).email().required(),\n                password: joi.string().min(8).required(),\n\n\n            })\n            const { error } = await schema.validate(data)\n            if (error) {\n                reject(error.details[0].message)\n            } else {\n                resolve(true)\n\n            }\n        })\n\n    }\n\n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAAgB;AAIhB,IAAO,wBAAQ;AAAA,EAEX,cAAc,CAAC,SAA6B;AACxC,WAAO,IAAI,QAAa,OAAO,SAAS,WAAW;AAC/C,cAAQ,IAAI,gBAAe,IAAI;AAE/B,YAAM,SAAS,WAAAA,QAAI,OAAO;AAAA,QACtB,UAAU,WAAAA,QAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE;AAAA,QACpC,OAAO,WAAAA,QAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,SAAS;AAAA,QACpD,UAAU,WAAAA,QAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,QAAQ,IAAI,OAAO,uBAAuB,CAAC,EAAE,SAAS;AAAA,UACnG,cAAc;AAAA,UACd,cAAc;AAAA,UACd,uBAAuB;AAAA,QAC3B,CAAC;AAAA,QACD,UAAU,WAAAA,QAAI,OAAO,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,QACvC,iBAAiB,WAAAA,QAAI,IAAI,UAAU;AAAA,MAEvC,CAAC;AACD,YAAM,EAAE,MAAM,IAAK,OAAO,SAAS,IAAI;AACvC,UAAI,OAAO;AACP,gBAAQ,IAAI,qBAAqB;AAEjC,eAAO,MAAM,QAAQ,CAAC,EAAE,OAAO;AAAA,MACnC,OAAO;AACH,gBAAQ,IAAI;AAAA,MAEhB;AAAA,IACJ,CAAC;AAAA,EAEL;AAAA,EACA,WAAW,CAAC,SAA0B;AAClC,WAAO,IAAI,QAAa,OAAO,SAAS,WAAW;AAC/C,YAAM,SAAS,WAAAA,QAAI,OAAO;AAAA,QAEtB,OAAO,WAAAA,QAAI,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,SAAS;AAAA,QACpD,UAAU,WAAAA,QAAI,OAAO,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,MAG3C,CAAC;AACD,YAAM,EAAE,MAAM,IAAI,MAAM,OAAO,SAAS,IAAI;AAC5C,UAAI,OAAO;AACP,eAAO,MAAM,QAAQ,CAAC,EAAE,OAAO;AAAA,MACnC,OAAO;AACH,gBAAQ,IAAI;AAAA,MAEhB;AAAA,IACJ,CAAC;AAAA,EAEL;AAGJ;",
  "names": ["joi"]
}
