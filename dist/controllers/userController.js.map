{
  "version": 3,
  "sources": ["../../src/controllers/userController.ts"],
  "sourcesContent": ["import { Request, Response } from \"express\";\nimport joi from '../services/joiValidation'\nimport { userRegisterParams } from \"src/types\";\nimport bycrypt from \"../services/bycrypt\";\nimport { userSchema } from \"../models/user\";\nimport { addAbortSignal } from \"stream\";\nimport { jwtsigning } from \"../services/jwtAuth\";\n\nexport const signup = async (req: Request, res: Response) => {\n    try {\n        const data: userRegisterParams = req.body\n        console.log({ data });\n\n        // validate forms\n        const validationResult: boolean = await joi.userRegister(data)\n        console.log({ validationResult });\n\n\n        // encrypt password\n        const hashedPassword = await bycrypt.bcryptData(data.password)\n        console.log({ hashedPassword });\n\n        // check user exist in database\n\n\n\n        const addedUser = new userSchema({\n            email: data.email,\n            fullName: data.fullName,\n            username: data.username.toLowerCase(),\n            password: hashedPassword as string,\n            joined: Date.now().toString(),\n\n        })\n        console.log({ addedUser });\n\n        await addedUser.save()\n\n        return res.json({\n            success: true,\n            msg: \"registration successfull\"\n        })\n    } catch (error: any) {\n        const message = error.message ?? error as string\n        return res.json({\n            success: false,\n            msg: message\n        })\n    }\n\n\n}\n\nexport const login = async (req: Request, res: Response) => {\n    try {\n        const data: userRegisterParams = req.body\n        console.log({ data });\n\n        // validate forms\n        const validationResult: boolean = await joi.userLogin(data)\n        console.log({ validationResult });\n\n\n        // encrypt password\n        const user = await userSchema.findOne({ $and: [{ email: data.email }] }).lean()\n        if (!user) throw (\"User not found\")\n        const hashedPassword = await bycrypt.bcryptCompare(data.password, user.password)\n        console.log({ hashedPassword });\n        if (!hashedPassword) throw (\"Authentication incorrect\")\n\n        const tokenData = {\n            email: user.email,\n            uid: user._id,\n            name: user.username,\n        }\n        const token = await jwtsigning(tokenData, '10d')\n        return res.json({\n            success: true,\n            msg: \"login successfull\",\n            token\n\n        })\n    } catch (error: any) {\n        const message = error.message ?? error as string\n        return res.json({\n            success: false,\n            msg: message\n        })\n    }\n\n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,2BAAgB;AAEhB,qBAAoB;AACpB,kBAA2B;AAE3B,qBAA2B;AAEpB,MAAM,SAAS,OAAO,KAAc,QAAkB;AACzD,MAAI;AACA,UAAM,OAA2B,IAAI;AACrC,YAAQ,IAAI,EAAE,KAAK,CAAC;AAGpB,UAAM,mBAA4B,MAAM,qBAAAA,QAAI,aAAa,IAAI;AAC7D,YAAQ,IAAI,EAAE,iBAAiB,CAAC;AAIhC,UAAM,iBAAiB,MAAM,eAAAC,QAAQ,WAAW,KAAK,QAAQ;AAC7D,YAAQ,IAAI,EAAE,eAAe,CAAC;AAM9B,UAAM,YAAY,IAAI,uBAAW;AAAA,MAC7B,OAAO,KAAK;AAAA,MACZ,UAAU,KAAK;AAAA,MACf,UAAU,KAAK,SAAS,YAAY;AAAA,MACpC,UAAU;AAAA,MACV,QAAQ,KAAK,IAAI,EAAE,SAAS;AAAA,IAEhC,CAAC;AACD,YAAQ,IAAI,EAAE,UAAU,CAAC;AAEzB,UAAM,UAAU,KAAK;AAErB,WAAO,IAAI,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,KAAK;AAAA,IACT,CAAC;AAAA,EACL,SAAS,OAAY;AACjB,UAAM,UAAU,MAAM,WAAW;AACjC,WAAO,IAAI,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,KAAK;AAAA,IACT,CAAC;AAAA,EACL;AAGJ;AAEO,MAAM,QAAQ,OAAO,KAAc,QAAkB;AACxD,MAAI;AACA,UAAM,OAA2B,IAAI;AACrC,YAAQ,IAAI,EAAE,KAAK,CAAC;AAGpB,UAAM,mBAA4B,MAAM,qBAAAD,QAAI,UAAU,IAAI;AAC1D,YAAQ,IAAI,EAAE,iBAAiB,CAAC;AAIhC,UAAM,OAAO,MAAM,uBAAW,QAAQ,EAAE,MAAM,CAAC,EAAE,OAAO,KAAK,MAAM,CAAC,EAAE,CAAC,EAAE,KAAK;AAC9E,QAAI,CAAC;AAAM,YAAO;AAClB,UAAM,iBAAiB,MAAM,eAAAC,QAAQ,cAAc,KAAK,UAAU,KAAK,QAAQ;AAC/E,YAAQ,IAAI,EAAE,eAAe,CAAC;AAC9B,QAAI,CAAC;AAAgB,YAAO;AAE5B,UAAM,YAAY;AAAA,MACd,OAAO,KAAK;AAAA,MACZ,KAAK,KAAK;AAAA,MACV,MAAM,KAAK;AAAA,IACf;AACA,UAAM,QAAQ,UAAM,2BAAW,WAAW,KAAK;AAC/C,WAAO,IAAI,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,KAAK;AAAA,MACL;AAAA,IAEJ,CAAC;AAAA,EACL,SAAS,OAAY;AACjB,UAAM,UAAU,MAAM,WAAW;AACjC,WAAO,IAAI,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,KAAK;AAAA,IACT,CAAC;AAAA,EACL;AAGJ;",
  "names": ["joi", "bycrypt"]
}
